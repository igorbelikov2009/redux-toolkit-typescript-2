import { IComment } from "./../models/types";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/dist/query/react";

export const commentAPI = createApi({
  // При вызове этой функции нам необходимо передать ряд некоторых опций
  // 1. reducerPath - некоторый уникальный ключ, который будет определять
  //    текущий сервис
  // 2. baseQuery - здесь используем функцию fetchBaseQuery({baseUrl: '....'}),
  //    куда передаём базовый URL
  // 3. endpoints, здесь мы будем описывать все эндпоинты, на которые будем отправлять
  //    запросы и как-то менять наше состояние. Это функция, которая возвращает объект.
  // Фигурные скобки оборачиваем в круглые({})
  reducerPath: "commentApi",
  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:5000/" }),
  // По умолчанию redux-toolkit не знает, куда нам необходимо добавить объект,
  // созданный мутацией createComment. Для этого необходимо проставить определённые тэги.
  // В данном случае у нас всего лишь один тэг, это тег ["Comment"].
  // В массиве мы можем указать несколько тегов.
  tagTypes: ["Comment"],
  endpoints: (build) => ({
    // В дженерике два типа: 1-ый тип массива комментов IСomment[]; 2-ой тип аргумента,
    // который будет ожидать этот хук - number. В данном случае будем делать пагинацию и
    // нам необходимо указать limit. Фигурные скобки оборачиваем в круглые({}).
    // Эндпоинт получения комментов:_____
    fetchAllComments: build.query<IComment[], number>({
      query: (limit: number = 10) => ({
        url: "/comments",
        params: {
          _limit: limit,
        },
      }),
      // Теперь мы должны указать, что эндпоинт fetchAllComments работает с тэгом
      // ["Comment"]. То есть у нас могут быть несколько эндпоинтов, которые работают
      // с разными данными, и нам необходимо правильно эти эндпоинты сопоставить.
      // При получении данных, мы указываем, что этот эндпоинт обеспечивает доставку
      // данных, а при создании, обновлении, удалении комментов мы указываем, что эти
      // данные становятся неактуальными: invalidatesTags:['Post'].
      // Соответственно, query должен заново эти данные получить.
      providesTags: (result) => ["Comment"],
    }),
    // Создадим ещё один эндпоинт createComment, с помощью которого мы будем коммент
    // создавать. Будем использовать не квери build.query, а мутейшен build.mutation.
    // Принцип описания тот же. Здесь у query() аргументом будет не лимит, а сам comment,
    // то есть объект, который мы хотим сохранить в базе данных. В дженерике мы указываем
    // тип объекта (без массива []), который нам вернётся, и тип объекта, который мы
    // ожидаем аргументом. Фигурные скобки оборачиваем в круглые({}).

    // Эндпоинт создания коммента:_____
    createComment: build.mutation<IComment, IComment>({
      query: (comment) => ({
        url: "/comments",
        // Поскольку это у нас пост-запрос, нам явно неообходимо указать method: 'POST'.
        // А так же, у запроса есть тело, которое мы помещаем в сам объект. Именно этот
        // объект будет уходить вместе с запросом и отправляться на сервер.
        method: "POST",
        body: comment,
      }),
      invalidatesTags: ["Comment"], // прежние данные делаем неактуальными при помощи
      // этого тэга
    }),
    // Эндпоинт обновления коммента:_____
    updateComment: build.mutation<IComment, IComment>({
      query: (comment) => ({
        // указываем id коммента, который мы ходим обновить
        url: `/comments/${comment.id}`,
        // Поскольку это у нас PUT-запрос, нам явно неообходимо указать method: 'PUT'
        // Как тело запроса, оставляем сам объект. Этот объект, так же будет уходить
        // вместе с запросом, отправляться на сервер и менять там данные.
        method: "PUT",
        body: comment,
      }),
      invalidatesTags: ["Comment"], // прежние данные делаем неактуальными при помощи
      // этого тэга
    }),
    // Эндпоинт удаления коммента:_____
    deleteComment: build.mutation<IComment, IComment>({
      query: (comment) => ({
        // указываем id коммента, который мы ходим удалить
        url: `/comments/${comment.id}`,
        // Поскольку это у нас DELETE-запрос, нам явно
        // неообходимо указать method: 'DELETE',
        method: "DELETE",
      }),
      invalidatesTags: ["Comment"], // прежние данные делаем неактуальными при помощи
      // этого тэга
    }),
  }),
});

//
// Нам необходимо зарегистрировать редюсер в store.ts
// и, там же, добавить мидлвеер из нашего commentAPI
