import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/dist/query/react";
import { IPost } from "../models/IPost";

export const postAPI = createApi({
  // При вызове этой функции нам необходимо передать ряд некоторых опций
  // 1. reducerPath - некоторый уникальный ключ, который будет определять
  // текущий сервис
  // 2. baseQuery - здесь используем функцию fetchBaseQuery({baseUrl: '....'}), куда передаём базовый URL
  // 3. endpoints, здесь мы будем описывать все эндпоинты, на которые будем отправлять
  // запросы и как-то менять наше состояние. Это функция, которая возвращает объект.
  // Фигурныt скобки оборачиваем в круглые({})
  reducerPath: "postAPI",
  // baseQuery: fetchBaseQuery({ baseUrl: "https://jsonplaceholder.typicode.com/" }),
  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:5000/" }),
  // // По умолчанию redux-toolkit не знает, куда нам необходимо добавить объект, созданный мутацией createPost.
  // // Для этого необходимо проставить определённые тэги. В данном случае у нас всего лишь один тэг, это тег 'Post'.
  // // В массиве мы можем указать несколько тегов.
  tagTypes: ["Post"],
  endpoints: (build) => ({
    // В дженерике два типа: 1-ый - массив постов IPost[], 2-ой тип аргумента, который будет ожидать этот хук - number.
    // В данном случае будем делать пагинацию и нам необходимо указать limit
    // Фигурные скобки оборачиваем в круглые({})
    fetchAllPosts: build.query<IPost[], number>({
      // fetchAllPosts - эндпоинт
      // Это функция, которая возвращает объект. Сама функция будет принимать аргументы,
      // необходимые для запроса. Это может быть тело запроса, какие-то параметры (лимит), какой-то URL.
      // Здесь мы указываем URL до конкретного эндпоинта. Он будет приплюсовываться к базовому URL.
      query: (limit: number = 5) => ({
        url: "/posts",
        params: {
          _limit: limit,
        },
      }),
      // Теперь мы должны указать, что этот эндпоинт (fetchAllPosts) занимается тем, что работает с тэгом 'Post'.
      // То есть у нас могут быть несколько эндпоинтов, которые работают с разными данными, и нам необходимо
      // правильно эти эндпоинты сопоставить. При получении данных, мы указываем, что этот эндпоинт обеспечивает
      // доставку данных, а при создании постов мы указываем, что эти данные становятся неактуальными: invalidatesTags:['Post'].
      // Соответственно, query должен заново эти данные получить.
      providesTags: (result) => ["Post"],
    }),

    // Создадим ещё один эндпоинт createPost, с помощью которого мы будем пост создавать, будем использовать не квери build.query,
    // а мутейшен build.mutation, принцип описания тот же. Здесь у query() аргументом будетне лимит, а сам post,
    // то есть объект, который мы хотим сохранить в базе данных.
    // В дженерике мы указываем тип объекта, который нам вернётся и тип объекта, который мы ожидаем аргументом.
    // Фигурные скобки оборачиваем в круглые({})
    createPost: build.mutation<IPost, IPost>({
      //    :QueryArg
      query: (post) => ({
        url: "/posts",
        // Поскольку это у нас пост-запрос, нам явно неообходимо указать method: 'POST'
        // и так же у запроса есть тело, которое мы помещаем в сам объект. То есть этот объект будет уходить
        // вместе с запросом и отправляться на сервер.
        method: "POST",
        body: post,
      }),
      invalidatesTags: ["Post"],
    }),
    // обновление поста
    updatePost: build.mutation<IPost, IPost>({
      //    :QueryArg
      query: (post) => ({
        // указываем id поста, который мы ходим обновить
        url: `/posts/${post.id}`,
        // Поскольку это у нас PUT-запрос, нам явно неообходимо указать method: 'PUT'
        // Как тело запроса, оставляем сам объект. Этот объект, так же будет уходить
        // вместе с запросом, отправляться на сервер и менять там данные.
        method: "PUT",
        body: post,
      }),
      invalidatesTags: ["Post"],
    }),
    // удаление поста
    deletePost: build.mutation<IPost, IPost>({
      //    :QueryArg
      query: (post) => ({
        // указываем id поста, который мы ходим удалить
        url: `/posts/${post.id}`,
        // Поскольку это у нас DELETE-запрос, нам явно неообходимо указать method: 'DELETE',
        method: "DELETE",
      }),
      invalidatesTags: ["Post"],
    }),
  }),
});
// Нам необходимо зарегистрировать редюсер в store.ts
// и, там же, добавить мидлвеер из нашего postAPI
